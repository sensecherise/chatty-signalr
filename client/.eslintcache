[{"/Users/cherise/Chatty/client/src/index.js":"1","/Users/cherise/Chatty/client/src/reportWebVitals.js":"2","/Users/cherise/Chatty/client/src/App.js":"3","/Users/cherise/Chatty/client/src/Chat/Chat.js":"4","/Users/cherise/Chatty/client/src/Chat/ChatInput/ChatInput.js":"5","/Users/cherise/Chatty/client/src/Chat/ChatWindow/ChatWindow.js":"6","/Users/cherise/Chatty/client/src/Chat/ChatWindow/Message/Message.js":"7"},{"size":500,"mtime":1607930070267,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1607930070270,"results":"10","hashOfConfig":"9"},{"size":179,"mtime":1607931660754,"results":"11","hashOfConfig":"9"},{"size":3990,"mtime":1608099164525,"results":"12","hashOfConfig":"9"},{"size":2251,"mtime":1608098403744,"results":"13","hashOfConfig":"9"},{"size":361,"mtime":1607931392317,"results":"14","hashOfConfig":"9"},{"size":258,"mtime":1607931296775,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"nzs3yi",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"/Users/cherise/Chatty/client/src/index.js",[],["34","35"],"/Users/cherise/Chatty/client/src/reportWebVitals.js",[],"/Users/cherise/Chatty/client/src/App.js",[],"/Users/cherise/Chatty/client/src/Chat/Chat.js",["36","37","38","39"],"import React, { useState, useEffect, useRef } from 'react';\nimport { HubConnectionBuilder } from '@microsoft/signalr';\n\nimport ChatWindow from './ChatWindow/ChatWindow';\nimport ChatInput from './ChatInput/ChatInput';\n\nconst Chat = () => {\n    const [ chat, setChat ] = useState([]);\n    const [ userId, setUserId ] = useState([]);\n    const latestChat = useRef(null);\n    //var connectionId = null;\n    const [ connectionId, setConnectionId ] = useState([]);\n\n    latestChat.current = chat;\n\n    useEffect(() => {\n        // const connection = new HubConnectionBuilder()\n        //     .withUrl('https://localhost:5001/hubs/chat')\n        //     .withAutomaticReconnect()\n        //     .build();\n            \n        // connection.start()\n        //     .then(result => {\n        //         console.log('Connected!');\n\n        //         connection.on('ReceiveMessage', message => {\n        //             const updatedChat = [...latestChat.current];\n        //             updatedChat.push(message);\n                \n        //             setChat(updatedChat);\n        //         });\n        //     })\n        //     .catch(e => console.log('Connection failed: ', e));\n\n        startConnection();\n\n    }, []);\n\n    const getConnectionId = (connection) => {\n        connection.invoke('getconnectionid').then(\n            (data) => {\n                console.log('print connectionId')\n                console.log(data);\n                setConnectionId('your userId is : ' + data);\n\n                alert(data);\n            }\n        );\n    }\n\n    const startConnection = () => {\n        const connection = new HubConnectionBuilder()\n            .withUrl('https://localhost:5001/hubs/chat')\n            .withAutomaticReconnect()\n            .build();\n\n        connection.start()\n            .then(() => console.log('Connected!'))\n            .then(() => {\n                getConnectionId(connection);\n            })\n            .then(result => {\n\n                connection.on('ReceiveMessage', message => {\n                    console.log('received !')\n                    console.log(message)\n                    const updatedChat = [...latestChat.current];\n                    updatedChat.push(message);\n\n                    setChat(updatedChat);\n                })\n\n                \n            })\n            .catch(\n                // e => {\n                // setTimeout(() => {\n                //     console.log(\"reconnecting!\");\n                //     startConnection();\n                // }, 5000);   \n                // }\n                e => console.log('Connection failed: ', e)\n            )\n    }\n\n    const sendMessage = async (user, receiver, message) => {\n        const chatMessage = {\n            user: user,\n            receiver : receiver,\n            message: message\n        };\n\n        console.log(chatMessage);\n\n        try {\n            await  fetch('https://localhost:5001/chat/messages', { \n                method: 'POST', \n                body: JSON.stringify(chatMessage),\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n        }\n        catch(e) {\n            console.log('Sending message failed.', e);\n        }\n    }\n    \n\n    // const sendMessage = async (user, message) => {\n    //     const chatMessage = {\n    //         user: user,\n    //         message: message\n    //     };\n\n    //     try {\n    //         await  fetch('https://localhost:5001/chat/messages', { \n    //             method: 'POST', \n    //             body: JSON.stringify(chatMessage),\n    //             headers: {\n    //                 'Content-Type': 'application/json'\n    //             }\n    //         });\n    //     }\n    //     catch(e) {\n    //         console.log('Sending message failed.', e);\n    //     }\n    // }\n\n    return (\n        <div>\n            <ChatInput sendMessage={sendMessage} />\n            <hr />\n            <ChatWindow chat={chat}/>\n        </div>\n    );\n};\n\nexport default Chat;","/Users/cherise/Chatty/client/src/Chat/ChatInput/ChatInput.js",["40","41"],"import React, { useState } from 'react';\n\nconst ChatInput = (props) => {\n    const [user, setUser] = useState('');\n    const [receiver, setReceiver] = useState('');\n    const [message, setMessage] = useState('');\n    const [userid, setUserId] = useState('');\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n\n        const isUserProvided = user && user !== '';\n        const isMessageProvided = message && message !== '';\n        const isReceiverProvided = receiver && receiver !== '';\n\n        if (isUserProvided && isMessageProvided && isReceiverProvided) {\n            props.sendMessage(user, receiver, message);\n        }\n        else {\n            alert('Please insert an user and a message.');\n        }\n    }\n\n    // const onUserIdUpdate = (e) => {\n    //     setUserId()\n    // }\n\n    const onUserIdUpdate = (userId) => {\n        setUserId(userId);\n    }\n\n    const onUserUpdate = (e) => {\n        setUser(e.target.value);\n    }\n\n    const onMessageUpdate = (e) => {\n        setMessage(e.target.value);\n    }\n\n    const onReceiverUpdate = (e) => {\n        setReceiver(e.target.value);\n    }\n\n    return (\n        <form\n            onSubmit={onSubmit}>\n            {/* <label htmlFor=\"userid\"\n                id=\"userid\"\n                name=\"userid\"\n                value={userid}\n                onChange={onUserIdUpdate}\n            > \n             </label> */ }\n            <label htmlFor=\"user\">User:</label>\n            <br />\n            <input\n                id=\"user\"\n                name=\"user\"\n                value={user}\n                onChange={onUserUpdate} />\n            <br />\n            <label htmlFor=\"receiver\">Receiver:</label>\n            <br />\n            <input\n                id=\"receiver\"\n                name=\"receiver\"\n                value={receiver}\n                onChange={onReceiverUpdate}\n            />\n            <br />\n            <label htmlFor=\"message\">Message:</label>\n            <br />\n            <input\n                type=\"text\"\n                id=\"message\"\n                name=\"message\"\n                value={message}\n                onChange={onMessageUpdate} />\n            <br /><br />\n            <button>Submit</button>\n        </form>\n    )\n};\n\nexport default ChatInput;","/Users/cherise/Chatty/client/src/Chat/ChatWindow/ChatWindow.js",[],"/Users/cherise/Chatty/client/src/Chat/ChatWindow/Message/Message.js",[],["42","43"],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":9,"column":13,"nodeType":"50","messageId":"51","endLine":9,"endColumn":19},{"ruleId":"48","severity":1,"message":"52","line":9,"column":21,"nodeType":"50","messageId":"51","endLine":9,"endColumn":30},{"ruleId":"48","severity":1,"message":"53","line":12,"column":13,"nodeType":"50","messageId":"51","endLine":12,"endColumn":25},{"ruleId":"54","severity":1,"message":"55","line":37,"column":8,"nodeType":"56","endLine":37,"endColumn":10,"suggestions":"57"},{"ruleId":"48","severity":1,"message":"58","line":7,"column":12,"nodeType":"50","messageId":"51","endLine":7,"endColumn":18},{"ruleId":"48","severity":1,"message":"59","line":28,"column":11,"nodeType":"50","messageId":"51","endLine":28,"endColumn":25},{"ruleId":"44","replacedBy":"60"},{"ruleId":"46","replacedBy":"61"},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'userId' is assigned a value but never used.","Identifier","unusedVar","'setUserId' is assigned a value but never used.","'connectionId' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'startConnection'. Either include it or remove the dependency array.","ArrayExpression",["64"],"'userid' is assigned a value but never used.","'onUserIdUpdate' is assigned a value but never used.",["62"],["63"],"no-global-assign","no-unsafe-negation",{"desc":"65","fix":"66"},"Update the dependencies array to be: [startConnection]",{"range":"67","text":"68"},[1208,1210],"[startConnection]"]